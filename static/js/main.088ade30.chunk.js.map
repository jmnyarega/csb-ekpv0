{"version":3,"sources":["fakeApi.js","index.js"],"names":["wrapPromise","promise","result","status","suspender","then","r","e","read","resource","userPromise","console","log","Promise","resolve","setTimeout","name","postsPromise","id","text","user","posts","fetchProfileData","ProfilePage","react_default","a","createElement","react","fallback","ProfileDetails","ProfileTimeline","map","post","key","rootElement","document","getElementById","ReactDOM","createRoot","render"],"mappings":"+JAaA,SAASA,EAAYC,GACnB,IACIC,EADAC,EAAS,UAETC,EAAYH,EAAQI,KACtB,SAACC,GACCH,EAAS,UACTD,EAASI,GAEX,SAACC,GACCJ,EAAS,QACTD,EAASK,IAGb,MAAO,CACLC,KADK,WAEH,GAAe,YAAXL,EACF,MAAMC,EACD,GAAe,UAAXD,EACT,MAAMD,EACD,GAAe,YAAXC,EACT,OAAOD,IC3Bf,IAAMO,EDNC,WACL,IAAIC,GAuCJC,QAAQC,IAAI,iBACL,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTJ,QAAQC,IAAI,gBACZE,EAAQ,CACNE,KAAM,iBAEP,QA7CDC,GAkDJN,QAAQC,IAAI,kBACL,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTJ,QAAQC,IAAI,iBACZE,EAAQ,CACN,CACEI,GAAI,EACJC,KAAM,+CAER,CACED,GAAI,EACJC,KAAM,uDAER,CACED,GAAI,EACJC,KAAM,2CAGT,SAnEL,MAAO,CACLC,KAAMpB,EAAYU,GAClBW,MAAOrB,EAAYiB,ICCNK,GAEjB,SAASC,IACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,SAAUJ,EAAAC,EAAAC,cAAA,iCAEVF,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,SAAUJ,EAAAC,EAAAC,cAAA,+BAEVF,EAAAC,EAAAC,cAACI,EAAD,QAMR,SAASD,IAEP,IAAMT,EAAOX,EAASW,KAAKZ,OAC3B,OAAOgB,EAAAC,EAAAC,cAAA,UAAKN,EAAKJ,MAGnB,SAASc,IAEP,IAAMT,EAAQZ,EAASY,MAAMb,OAC7B,OACEgB,EAAAC,EAAAC,cAAA,UACGL,EAAMU,IAAI,SAAAC,GAAI,OACbR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,EAAKd,IAAKc,EAAKb,SAMhC,IAAMe,EAAcC,SAASC,eAC3B,QAEFC,IAASC,WAAWJ,GAAaK,OAC/Bf,EAAAC,EAAAC,cAACH,EAAD","file":"static/js/main.088ade30.chunk.js","sourcesContent":["export function fetchProfileData() {\n  let userPromise = fetchUser();\n  let postsPromise = fetchPosts();\n  return {\n    user: wrapPromise(userPromise),\n    posts: wrapPromise(postsPromise)\n  };\n}\n\n// Suspense integrations like Relay implement\n// a contract like this to integrate with React.\n// Real implementations can be significantly more complex.\n// Don't copy-paste this into your project!\nfunction wrapPromise(promise) {\n  let status = \"pending\";\n  let result;\n  let suspender = promise.then(\n    (r) => {\n      status = \"success\";\n      result = r;\n    },\n    (e) => {\n      status = \"error\";\n      result = e;\n    }\n  );\n  return {\n    read() {\n      if (status === \"pending\") {\n        throw suspender;\n      } else if (status === \"error\") {\n        throw result;\n      } else if (status === \"success\") {\n        return result;\n      }\n    }\n  };\n}\n\nfunction fetchUser() {\n  console.log(\"fetch user...\");\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"fetched user\");\n      resolve({\n        name: \"Ringo Starr\"\n      });\n    }, 1000);\n  });\n}\n\nfunction fetchPosts() {\n  console.log(\"fetch posts...\");\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"fetched posts\");\n      resolve([\n        {\n          id: 0,\n          text: \"I get by with a little help from my friends\"\n        },\n        {\n          id: 1,\n          text: \"I'd like to be under the sea in an octupus's garden\"\n        },\n        {\n          id: 2,\n          text: \"You got that sand all over your feet\"\n        }\n      ]);\n    }, 1100);\n  });\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport { fetchProfileData } from \"./fakeApi\";\n\nconst resource = fetchProfileData();\n\nfunction ProfilePage() {\n  return (\n    <Suspense\n      fallback={<h1>Loading profile...</h1>}\n    >\n      <ProfileDetails />\n      <Suspense\n        fallback={<h1>Loading posts...</h1>}\n      >\n        <ProfileTimeline />\n      </Suspense>\n    </Suspense>\n  );\n}\n\nfunction ProfileDetails() {\n  // Try to read user info, although it might not have loaded yet\n  const user = resource.user.read();\n  return <h1>{user.name}</h1>;\n}\n\nfunction ProfileTimeline() {\n  // Try to read posts, although they might not have loaded yet\n  const posts = resource.posts.read();\n  return (\n    <ul>\n      {posts.map(post => (\n        <li key={post.id}>{post.text}</li>\n      ))}\n    </ul>\n  );\n}\n\nconst rootElement = document.getElementById(\n  \"root\"\n);\nReactDOM.createRoot(rootElement).render(\n  <ProfilePage />\n);\n"],"sourceRoot":""}